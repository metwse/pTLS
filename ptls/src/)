use rsa::{
    sha2::{Sha224, Sha256, Sha384, Sha512},
    RsaPublicKey,
};

use crate::crypto::{
    encryption::Encrypt,
    signature::Signing
};

macro_rules! hash_enums {
    ([$( ($hash_function:ident, $id:expr) ),*], [$( $struct:ident ),*]) => {
        pub enum HashFunction {
            $(
                $hash_function = $id
            ),*
        }

        paste::paste! {
            $(
                pub enum [<$struct Function2>] {
                }
            )*
        }
    },
    (@define_hash_functions [$( ($hash_function:ident, $id:expr) ),*]) => {
    }
}

hash_enums!(
    [(Sha224, 0), (Sha256, 1), (Sha384, 2), (Sha512, 3)], 
    [Encrypt, Signing]
);

pub enum EncryptFunction {
    Sha224(Encrypt<Sha224>),
    Sha256(Encrypt<Sha256>),
    Sha384(Encrypt<Sha384>),
    Sha512(Encrypt<Sha512>),
}

impl EncryptFunction {
    fn new(
        hash_function: HashFunction,
        public_key: RsaPublicKey,
    ) -> Result<EncryptFunction, crate::crypto::Error> {
        match hash_function {
            HashFunction::Sha224 => Encrypt::<Sha224>::try_new(public_key).map(Self::Sha224),
            HashFunction::Sha256 => Encrypt::<Sha256>::try_new(public_key).map(Self::Sha256),
            HashFunction::Sha384 => Encrypt::<Sha384>::try_new(public_key).map(Self::Sha384),
            HashFunction::Sha512 => Encrypt::<Sha512>::try_new(public_key).map(Self::Sha512),
        }
    }
}
